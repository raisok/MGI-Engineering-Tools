# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.py'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from MGIEngineerAnalysis import Ui_MGIMainWindow
from MetricsTools import *
from QCMetricsFunction import *
from FOVMetricsFunction import *
from OpticsTools import *
from LaserFormulaFunction import *
from SigmaAnalysisFunction import *
from StageFlatnessFunction import *
from FluidicTools import *
from utils.QCMetricScriptTool import *
from utils.FOVMetricScriptTool import *
from utils.OpticsScriptTool import *
from SigamaResult import *

import logging
# logging.basicConfig(level=logging.INFO)

#继承UI界面的类，然后进行初始化
class MGIWindow(QMainWindow,Ui_MGIMainWindow):
    def __init__(self):
        super(MGIWindow,self).__init__()
        self.setupUi(self)
        self.MetricsButton.clicked.connect(self.select_metirc)
        self.OpticsButton.clicked.connect(self.select_optics)
        self.FluidicButton.clicked.connect(self.select_fluidics)

    def select_metirc(self):
        # self.hide()
        self.metricwindow = MetricsWindow()
        self.metricwindow.show()

    def select_optics(self):
        # self.hide()
        self.metricwindow = OpticsWindows()
        self.metricwindow.show()

    def select_fluidics(self):
        # self.hide()
        self.metricwindow = FluidicWindow()
        self.metricwindow.show()

class MetricsWindow(QDialog,Ui_MetricsTools):
    def __init__(self):
        super(MetricsWindow, self).__init__()
        self.setupUi(self)
        self.FovpushButton.clicked.connect(self.open_fov)
        self.QcPushButton.clicked.connect(self.open_qc)

        ######## 这部分写法会报错 ############
        # QDialog.__init__(self)
        # self.metircswindow=Ui_MetricsTools()
        # self.metricswindow.setupUi(self)
        # self.metircswindow.QcPushButton.clicked.connect(self.open_qc)
        # self.metircswindow.FovpushButton.clicked.connect(self.open_fov)
         ######## 这部分写法会报错 ############

    def open_qc(self):
        self.hide()
        self.qcmetricswindows = QcMetricsWindows()
        self.qcmetricswindows.show()

    def open_fov(self):
        self.hide()
        self.fovmetricswindows = FovMetricsWindows()
        self.fovmetricswindows.show()

class QcMetricsWindows(QWidget,Ui_QcMetricsForm):
    def __init__(self):
        super(QcMetricsWindows,self).__init__()
        self.setupUi(self)
        self.QCOpenButton.clicked.connect(self.openfile)
        self.QCImportButton.clicked.connect(self.getfile)
        self.QCAnalysisButton.clicked.connect(self.analysisfile)
        self.file_path=""

    def  openfile(self):
        abs_path,_h = QFileDialog.getOpenFileName(self,'Open File','.')
        if abs_path:
            logging.info("qc open file\t"+abs_path)
            self.QClineEdit.setText(abs_path)

    def getfile(self):
        self.file_path = self.QClineEdit.text()
        if self.file_path:
            logging.info ("qc import file\t"+self.file_path)
            self.QCSucLabel.setText(self.file_path+"\t导入成功")
            cate_list = get_category(self.file_path)
            if len(cate_list) == 0:
                logging.error("Maybe the file you import is not a standard T7 QC Metrics Format.")
            self.QCcomboBox.clear()
            self.QCcomboBox.addItems(cate_list)
        else:
            self.QCSucLabel.setText("导入失败")
            self.QCcomboBox.clear()

    def analysisfile(self):
        logging.info(self.file_path+"\t start analysis...")
        select_item = self.QCcomboBox.currentText()
        if self.file_path:
            # getqc_draw_data(self.file_path,select_item)
            pyecharts_heatmap()
        else:
            logging.error(self.file_path+"\t is not exists...")
        logging.info("qc analysis complete...")


class FovMetricsWindows(QWidget,Ui_FovMetricsForm):
    def __init__(self):
        super(FovMetricsWindows,self).__init__()
        self.setupUi(self)
        self.FovOpenButton.clicked.connect(self.openfile)
        self.FOVImportButton.clicked.connect(self.getfile)
        self.FOVAnalysisButton.clicked.connect(self.analysisfile)
        self.file_path=""

    def  openfile(self):
        abs_path,_h = QFileDialog.getOpenFileName(self,'Open File','.')
        if abs_path:
            logging.info("open file\t"+abs_path)
            self.lineEdit.setText(abs_path)

    def getfile(self):
        self.file_path = self.lineEdit.text()
        if self.file_path:
            logging.info ("import file\t"+self.file_path)
            self.label.setText(self.file_path+"\t导入成功")
            cate_list = get_fov_category(self.file_path)
            if len(cate_list) == 0:
                logging.error("Maybe the file you import is not a standard T7 FOV Metrics Format.")
            self.comboBox.clear()
            self.comboBox.addItems(cate_list)
        else:
            self.label.setText("导入失败")
            self.comboBox.clear()

    def analysisfile(self):
        logging.info("fov analysis file\t"+self.file_path)
        select_item = self.comboBox.currentText()
        if self.file_path:
            logging.info (self.file_path+"\t is exists.")

            logging.info("Drawing 3d figure")
            # draw_terrain3d(self.file_path,select_item)
            logging.info("Drawing 2d figure")
            draw_terrain2d(self.file_path, select_item)
        else:
            logging.error(self.file_path+" is not exists")
        logging.info("fov analysis complete...")


class OpticsWindows(QDialog,Ui_OpticsDialog):
    def __init__(self):
        super(OpticsWindows,self).__init__()
        self.setupUi(self)
        self.LaserPushButton.clicked.connect(self.open_laser)
        self.SigmaPushButton.clicked.connect(self.open_sigma)
        self.StagePushButton.clicked.connect(self.open_stage)

    def open_laser(self):
        self.hide()
        self.laserwindows = LaserWindow()
        self.laserwindows.show()

    def open_sigma(self):
        self.hide()
        self.sigmawindows = SigmaWindow()
        self.sigmawindows.show()

    def open_stage(self):
        self.hide()
        self.stagewindows = StageWindow()
        self.stagewindows.show()

class SigmaWindow(QWidget,Ui_SigmaForm):
    def __init__(self):
        super(SigmaWindow,self).__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.openfile)
        self.pushButton_2.clicked.connect(self.analysisfile)
        self.file_path=""

    def  openfile(self):
        abs_path,_h = QFileDialog.getOpenFileName(self,'Open File','.')
        if abs_path:
            logging.info("open file\t"+abs_path)
            self.lineEdit.setText(abs_path)
            self.file_path = self.lineEdit.text()

    def analysisfile(self):
        logging.info("sigma analysis file\t"+self.file_path)
        if self.file_path:
            logging.info (self.file_path+"\t is exists.")
            logging.info("Drawing all details")
            logging.info("Drawing all cameras")

            text = "\t    Single Camera Focus Concordance\n"
            text2 = "\tAll Cameras Focus Concordance\n"
            text3 = "The Best AF Target\n"

            text += str("*" * 100)
            text += '\n'
            Single_camera_fous_concordance = get_best_AF_target(self.file_path)[0]
            single_channel_max_diff = get_best_AF_target(self.file_path)[3]
            if single_channel_max_diff > 1:
                text += '\tError: Single camera focus concordance is bad !!!\t\n\n'
            for eachlist in Single_camera_fous_concordance:
                eachlist = [str(i) for i in eachlist]
                text += str('\t'.join(eachlist))
                text += '\n'
            text += str("*" * 100)


            # global  text2
            text2 += str("*" * 100)
            text2 += '\n'
            All_cameras_focus_concordance = get_best_AF_target(self.file_path)[1]
            Multi_channel_max_diff = get_best_AF_target(self.file_path)[4]
            if Multi_channel_max_diff > 1:
                text2 += '\tError: All camera focus concordance is bad !!!\t\n\n'
            for eachlist in All_cameras_focus_concordance:
                eachlist = [str(i) for i in eachlist]
                text2 += str('\t'.join(eachlist))
                text2 += '\n'
            text2 += str("*" * 100)


            # global text3
            text3 += str("*" * 100)
            text3 += '\n'
            Best_AF_Target = get_best_AF_target(self.file_path)[2]

            text3 += 'Best_AF_Target\t' + str(Best_AF_Target[0]) + "\n"
            text3 += str("*" * 100)


            self.stageresultwindows = SigmaResultWindow()

            self.stageresultwindows.AllFouseLabel.setText(text2)

            self.stageresultwindows.AllFouseLabel.setAutoFillBackground(True)

            self.stageresultwindows.SingleFouceLabel.setText(text)
            self.stageresultwindows.SingleFouceLabel.setAutoFillBackground(True)

            self.stageresultwindows.BestAFLabel.setText(text3)
            self.stageresultwindows.BestAFLabel.setAutoFillBackground(True)
            AllFousebackground_color = QColor()
            AllFousebackground_color.setNamedColor('#ffcc66')
            AllFousepalette = QPalette()
            AllFousepalette.setColor(QPalette.Window, AllFousebackground_color)
            self.stageresultwindows.AllFouseLabel.setPalette(AllFousepalette)
            Singlebackground_color = QColor()
            Singlebackground_color.setNamedColor('#cc9900')
            Singlepalette = QPalette()
            Singlepalette.setColor(QPalette.Window, Singlebackground_color)
            self.stageresultwindows.SingleFouceLabel.setPalette(Singlepalette)
            BestAFbackground_color = QColor()
            BestAFbackground_color.setNamedColor('#cc3300')
            BestAFpalette = QPalette()
            BestAFpalette.setColor(QPalette.Window, BestAFbackground_color)
            self.stageresultwindows.BestAFLabel.setPalette(BestAFpalette)
            self.stageresultwindows.show()

        else:
            logging.error(self.file_path+" is not exists")
        logging.info("sigma analysis complete...")

class SigmaResultWindow(QWidget,Ui_SigamaResultForm):
    def __init__(self):
        super(SigmaResultWindow,self).__init__()
        self.setupUi(self)


class StageWindow(QWidget,Ui_StageForm):
    def __init__(self):
        super(StageWindow,self).__init__()
        self.setupUi(self)
        self.StageOpenPushButton.clicked.connect(self.openfile)
        self.StageAnalysisButton.clicked.connect(self.analysisfile)
        self.file_path=""

    def  openfile(self):
        abs_path,_h = QFileDialog.getOpenFileName(self,'Open File','.')
        if abs_path:
            logging.info("open file\t"+abs_path)
            self.StagelineEdit.setText(abs_path)
            self.file_path = self.StagelineEdit.text()

    def analysisfile(self):
        logging.info("stage analysis file\t"+self.file_path)
        if self.file_path:
            logging.info (self.file_path+"\t is exists.")
            logging.info("Stage Flatness")
            stagt_flatness(self.file_path)
        else:
            logging.error(self.file_path+" is not exists")
        logging.info("stage analysis complete...")

class LaserWindow(QWidget,Ui_LaserForm):
    def __init__(self):
        super(LaserWindow,self).__init__()
        self.setupUi(self)
        self.CalPushButton.clicked.connect(self.analysisfile)

    def analysisfile(self):
        logging.info("laser is running.")
        power_list = []
        x_list=[0,10,20,30,40,50,60,70,80,90,100]
        for i in range(11):
            power_value = float(self.tableWidget.item(1,i).text())
            logging.info("power value is \t:"+str(power_value))
            power_list.append(power_value)

        #power_list_cal 为测出来得功率
        power_list_cal = [20*float(i) for i in power_list]

        #由于作图只使用了1到9位的数字，所以这里做了切片
        f1 = np.polyfit(power_list_cal[1:10], x_list[1:10], 1)
        # power_list_cal=[24,28,30,36,44,50,56,62,68]

        logging.info("formula a is: "+str(f1[0]))
        logging.info("formula b is: " + str(f1[1]))

        yvals = np.polyval(f1, power_list_cal[1:10])

        if f1[1] >=0:
            formula_line = "y = "+str(round(f1[0],4))+"x + "+str(round(f1[1],4))
        else:
            formula_line = "y = " + str(round(f1[0], 4)) + "x - " + str(abs(round(f1[1], 4)))

        laser_formula_cal(power_list,x_list)

        laser_formula_cal_reg(power_list_cal[1:10],x_list[1:10],yvals,formula_line)

        palette_green = QPalette()
        palette_green.setColor(QPalette.Window, Qt.green)
        self.Laser_Original_Label.setPalette(palette_green)

        self.Laser_Original_Label.setText(self.Laser_Original_Label.text()+" "+formula_line)

        logging.info("formula is: "+formula_line)

class FluidicWindow(QWidget,Ui_FludicsForm):
    def __init__(self):
        super(FluidicWindow,self).__init__()
        self.setupUi(self)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MGIWindow()
    window.show()
    sys.exit(app.exec_())
